import type { ClientOptions, RestTransportOptions } from '../../options'
import type { GetContentsDataType } from '../types'
import { put, puts } from '../utils'

export async function getClientConnectionContents({ options, nuxt }: GetContentsDataType): Promise<string> {
  const pinia = !!(options.client as ClientOptions)?.pinia
  const transports = options?.transports
  const rest = !!transports?.rest
  const sio = !!transports?.websocket

  const restConnection = `rest('${(transports?.rest as RestTransportOptions)?.path}').fetch($fetch${put(pinia, `, OFetch`)})`
  const sioConnection = `socketioClient(io({ transports: ['websocket'] }))`

  return `// ! Generated by nuxt-feathers - do not change manually
// You can set it in nuxt.config.js with the feathers.transports option
import type { ClientApplication } from './client'
${puts([
  [rest, `import rest from '@feathersjs/rest-client'\nimport { $fetch } from 'ofetch'`],
  [sio, `import socketioClient from '@feathersjs/socketio-client'\nimport { io } from 'socket.io-client'`],
  [rest && pinia, `import { OFetch } from 'feathers-pinia'`],
])}

export function connection(client: ClientApplication) {
  const connection = ${put(rest && sio, `import.meta.server
    ? ${restConnection}
    : ${sioConnection}`, puts([
    [rest || !sio, restConnection],
    [sio, sioConnection],
  ]))}

  client.configure(connection)

  client.set('connection', connection)
}
`
}
