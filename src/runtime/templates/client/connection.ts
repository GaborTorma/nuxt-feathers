import type { Resolver } from '@nuxt/kit'
import type { ClientOptions, RestTransportOptions, WebsocketTransportOptions } from '../../options'
import type { GetContentsDataType } from '../types'
import { put, puts } from '../utils'

export function getClientConnectionContents(resolver: Resolver) {
  return async ({ options }: GetContentsDataType): Promise<string> => {
    const pinia = !!(options.client as ClientOptions)?.pinia
    const transports = options?.transports
    const rest = !!transports?.rest
    const sio = !!transports?.websocket

    const restPath = (transports?.rest as RestTransportOptions)?.path
    const sioPath = (transports?.websocket as WebsocketTransportOptions)?.path

    const restConnection = `rest(new URL('${restPath}', origin).href).fetch($fetch, OFetch)`
    const sioConnection = `socketioClient(io(origin, { path: '${sioPath}', transports: ['websocket'] }))`

    return `// ! Generated by nuxt-feathers - do not change manually
// You can set it in nuxt.config.js with the feathers.transports option
import type { ClientApplication } from './client'
${puts([
  [rest, `import rest from '@feathersjs/rest-client'\nimport { $fetch } from 'ofetch'`],
  [sio, `import socketioClient from '@feathersjs/socketio-client'\nimport { io } from 'socket.io-client'`],
  [rest, `import { OFetch } from '${put(pinia, 'feathers-pinia', resolver.resolve('./runtime/adapters/ofetch'))}'`],
])}

export function connection(origin?: string) {
  return function (client: ClientApplication) {
    const connection = ${put(rest && sio, `import.meta.server
      ? ${restConnection}
      : ${sioConnection}`, puts([
      [rest || !sio, restConnection],
      [sio, sioConnection],
    ]))}

    client.configure(connection)

    client.set('connection', connection)
  }
}
`
  }
}
