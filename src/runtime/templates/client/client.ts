import type { ClientOptions, DefaultAuthOptions } from '../../options'
import type { GetContentsDataType } from '../types'
import { put } from '../utils'

export function getClientContents({ options }: GetContentsDataType): string {
  const pinia = !!(options?.client as ClientOptions)?.pinia

  const apiType = pinia ? 'FeathersPiniaClient<ClientApplication>' : 'ClientApplication'

  let entity, entityImport
  const auth = options?.auth as DefaultAuthOptions
  if (auth) {
    entity = auth.entity
    entityImport = auth.entityImport
  }

  return `// ! Generated by nuxt-feathers - do not change manually
${put(auth, `import type { User } from '${entityImport?.from}'`)}
import type { Application, TransportConnection } from '@feathersjs/feathers'
${put(pinia, `import type { FeathersPiniaClient } from 'feathers-pinia'`)}

export interface Configuration {
  connection: TransportConnection<ServiceTypes>
}

export interface ServiceTypes {}

export type ClientApplication = Application<ServiceTypes, Configuration>

export type FeathersClientPlugin = Parameters<ClientApplication['configure']>['0']

export function defineFeathersClientPlugin(def: FeathersClientPlugin): FeathersClientPlugin {
  return def;
}
${put(auth, `  
declare module '@feathersjs/feathers' {
  interface Params {
    ${entity}?: ${entityImport?.as}
  }
}`)}

declare module '#app' {
  interface NuxtApp {
    $api: ${apiType}
  }
}

declare module 'vue' {
  interface ComponentCustomProperties {
    $api: ${apiType}
  }
}
`
}
