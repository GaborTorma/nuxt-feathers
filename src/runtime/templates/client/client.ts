import type { ClientOptions, DefaultAuthOptions } from '../../options'
import type { ServicesDirs } from '../../options/services'
import type { GetContentsDataType } from '../types'
import { type Import, scanDirExports } from 'unimport'
import { put } from '../utils'

export async function getClientContents({ options }: GetContentsDataType): Promise<string> {
  const services = (await scanDirExports(options.servicesDirs as ServicesDirs, {
    filePatterns: ['**/*.shared.ts'],
    fileFilter: file => /shared.ts$/.test(file),
    types: false,
  })).filter(({ name }) => /Client|default$/.test(name))

  const plugins = (options.client as ClientOptions).plugins as Array<Import>

  const modules = [...services, ...plugins]

  const auth = ((options?.auth as DefaultAuthOptions)?.authStrategies || []).length > 0

  return `// ! Generated by nuxt-feathers - do not change manually
// For more information about this file see https://dove.feathersjs.com/guides/cli/client.html

import type { Application, TransportConnection } from '@feathersjs/feathers'
import { feathers } from '@feathersjs/feathers'

${put(auth, `import { authentication } from './authentication'`)}
import { connection } from './connection'

${modules.map(module => `import ${module.name === 'default' ? module.as : `{ ${module.as} }`} from '${module.from.replace('.ts', '')}'`).join('\n')}

export interface Configuration {
  connection: TransportConnection<ServiceTypes>
}

export interface ServiceTypes {}

export type ClientApplication = Application<ServiceTypes, Configuration>

/**
 * Returns a typed client for the feathers-api app.
 *
 * @param connection The REST or Socket.io Feathers client connection
 * @param authenticationOptions Additional settings for the authentication client
 * @see https://dove.feathersjs.com/api/client.html
 * @returns The Feathers client application
 */
export function createClient(): ClientApplication {
  const feathersClient: ClientApplication = feathers()

  // Init connection
  feathersClient.configure(connection)

  // Init authentication
  ${put(auth, `feathersClient.configure(authentication)`)}

  // Init services
  ${services.map(service => `feathersClient.configure(${service.as})`).join('\n  ')}

  // Init plugins
  ${plugins.map(plugin => `feathersClient.configure(${plugin.as})`).join('\n  ')}

  return feathersClient
}
`
}
