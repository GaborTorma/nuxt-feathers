import type { DefaultAuthOptions } from '../../options/authentication'
import type { GetContentsDataType } from '../types'
import { put } from '../utils'

export async function getClientAuthenticationContents({ options }: GetContentsDataType): Promise<string> {
  const jwt = (options?.auth as DefaultAuthOptions)?.authStrategies?.includes('jwt')

  return `// ! Generated by nuxt-feathers - do not change manually
import type { ClientApplication } from './client'
import {${put(jwt, `useCookie,`)} useRuntimeConfig } from '#app'
import authenticationClient, { type AuthenticationClientOptions } from '@feathersjs/authentication-client'
import defu from 'defu'

export function authentication(client: ClientApplication) {
  const { auth } = useRuntimeConfig().public
  const authClientOptions = defu(auth!.client) as AuthenticationClientOptions
 
  ${put(jwt, `// Store JWT in a cookie for SSR.
    const jwt = useCookie<string | null>(authClientOptions.storageKey)
    const storage = {
      getItem: () => jwt.value,
      setItem: (key: string, val: string) => (jwt.value = val),
      removeItem: () => (jwt.value = null),
    }
    authClientOptions.storage = storage
  `)}
  client.configure(authenticationClient(authClientOptions))
}
`
}
