import type { RestTransportOptions } from '../../types'
import type { GetContentsDataType } from '../types'
import { createResolver } from '@nuxt/kit'
import { globSync } from 'glob'
import { hash } from 'ohash'
import { put, puts } from '../utils'

export function getServerContents({ nuxt, options }: GetContentsDataType): string {
  const resolver = createResolver(nuxt.options.rootDir)
  const services = globSync(resolver.resolve(options.servicesDir!, './*/*.ts'), { ignore: ['**/*.*.ts'] })
  console.log('server services', services)
  const plugins = globSync(resolver.resolve(options.feathersDir!, './*.ts'))
  console.log('server plugins', plugins)
  const modules = [...services, ...plugins]

  const transports = options?.transports
  const framework = (transports?.rest as RestTransportOptions)?.framework
  const exp = framework === 'express'
  const koa = framework === 'koa'
  const sio = !!transports?.websocket
  const routers = [exp && 'createExpressRouter', koa && 'createKoaRouter', sio && 'createSocketIoRouter'].filter(Boolean)

  return `// ! Generated by nuxt-feathers - do not change manually
import type { NitroApp } from 'nitropack'
import type { Application } from './declarations'
import configuration from '@feathersjs/configuration'
import { feathers } from '@feathersjs/feathers'
${puts([
  [koa, `import { bodyParser, koa as feathersKoa, parseAuthentication, rest } from '@feathersjs/koa'`],
  [exp, `import feathersExpress, { parseAuthentication, urlencoded, rest } from '@feathersjs/express'`],
  [sio, `import socketio from '@feathersjs/socketio'`],
])}
import { ${routers.join(', ')} } from '@gabortorma/feathers-nitro-adapter/routers'
import { defineNitroPlugin } from 'nitropack/dist/runtime/plugin'
${modules.map(module => `import _${hash(module)} from '${module}';`).join('\n')}

export default defineNitroPlugin((nitroApp: NitroApp) => {
  const app: Application = ${puts([
    [koa, `feathersKoa(feathers())`],
    [exp, `feathersExpress(feathers())`],
    [!transports?.rest, `feathers()`],
  ])}
  ${put(transports?.rest, `
  // Init rest server  
  ${put(koa, `app.use(bodyParser())`)}
  app.use(parseAuthentication())
  ${put(exp, `app.use(urlencoded({ extended: true }))`)}
  app.configure(rest())
  
  ${framework && `app.set('framework', '${framework}')`}`)}
  app.set('websocket', ${!!sio})

  app.configure(configuration()) // TODO: Move to Nuxt config

  ${put(sio, `// Init socket.io server
  app.configure(socketio({ transports: ['websocket'] }))`)}

  // Add nitroApp to feathers app
  app.nitroApp = nitroApp;

  // Init services
  ${services.map(service => `app.configure(_${hash(service)})`).join('\n  ')}

  // Init plugins
  ${plugins.map(plugin => `app.configure(_${hash(plugin)})`).join('\n  ')}

  void app.setup().then(()=> { // TODO: make async in Nitro v3
    ${puts([
      [koa, `// Init koa router\n    createKoaRouter(app)`],
      [exp, `// Init express router\n    createExpressRouter(app)`],
      [sio, `// Init socket.io router\n    createSocketIoRouter(app)`],
    ])}        
  }); 

  nitroApp.hooks.hook("close", async () => app.teardown());  
})
`
}
