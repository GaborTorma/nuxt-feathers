import type { ResolvedOptions } from '../../options'
import type { DefaultAuthOptions } from '../../options/authentication'
import type { RestOptions } from '../../options/transports/rest'
import { put, puts } from '../utils'

export function getServerContents(options: ResolvedOptions) {
  return (): string => {
    const transports = options?.transports
    const rest = !!transports?.rest
    const exp = (transports?.rest as RestOptions).framework === 'express'
    const koa = (transports?.rest as RestOptions).framework === 'koa'

    let entity, entityImport
    const auth = options?.auth as DefaultAuthOptions
    if (auth) {
      entity = auth.entity
      entityImport = auth.entityImport
    }

    return `// ! Generated by nuxt-feathers - do not change manually
import type { ${put(!rest, `Application as FeathersApplication, `)}HookContext as FeathersHookContext, NextFunction } from '@feathersjs/feathers'
${puts([
  [koa, `import type { Application as FeathersApplication } from '@feathersjs/koa'`],
  [exp, `import type { Application as FeathersApplication } from '@feathersjs/express'`],
])}
${put(auth, `import type { User } from '${entityImport?.from}'`)}
// import type { ModuleOptions } from '???'
import type { NitroApp } from 'nitropack'

export type { NextFunction }

export interface Configuration {
  framework?: 'express' | 'koa'
  websocket?: boolean
}

// A mapping of service names to types. Will be extended in service files.
export interface ServiceTypes {}

export interface ApplicationAddons {
  nitroApp?: NitroApp
  // moduleOptions: ModuleOptions
}

// The application instance type that will be used everywhere else
export type Application = FeathersApplication<ServiceTypes, Configuration> & ApplicationAddons

// The context for hook functions - can be typed with a service class
export type HookContext<S = any> = FeathersHookContext<Application, S>

export type FeathersServerPlugin = Parameters<Application['configure']>['0']

export function defineFeathersServerPlugin(def: FeathersServerPlugin): FeathersServerPlugin {
  return def
}
${put(auth, `  
declare module '@feathersjs/feathers' {
  interface Params {
    ${entity}?: ${entityImport?.as}
  }
}`)}
`
  }
}
